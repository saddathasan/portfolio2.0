/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WritingRouteImport } from './routes/writing'
import { Route as RanksRouteImport } from './routes/ranks'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as GamesRouteImport } from './routes/games'
import { Route as ExperienceRouteImport } from './routes/experience'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as BookmarksRouteImport } from './routes/bookmarks'
import { Route as BlogRouteImport } from './routes/blog'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BlogIndexRouteImport } from './routes/blog.index'
import { Route as BlogSlugRouteImport } from './routes/blog.$slug'

const WritingRoute = WritingRouteImport.update({
  id: '/writing',
  path: '/writing',
  getParentRoute: () => rootRouteImport,
} as any)
const RanksRoute = RanksRouteImport.update({
  id: '/ranks',
  path: '/ranks',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesRoute = GamesRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperienceRoute = ExperienceRouteImport.update({
  id: '/experience',
  path: '/experience',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarksRoute = BookmarksRouteImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRoute,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BlogRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRoute
  '/blog': typeof BlogRouteWithChildren
  '/bookmarks': typeof BookmarksRoute
  '/contact': typeof ContactRoute
  '/experience': typeof ExperienceRoute
  '/games': typeof GamesRoute
  '/projects': typeof ProjectsRoute
  '/ranks': typeof RanksRoute
  '/writing': typeof WritingRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof BlogIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRoute
  '/bookmarks': typeof BookmarksRoute
  '/contact': typeof ContactRoute
  '/experience': typeof ExperienceRoute
  '/games': typeof GamesRoute
  '/projects': typeof ProjectsRoute
  '/ranks': typeof RanksRoute
  '/writing': typeof WritingRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog': typeof BlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRoute
  '/blog': typeof BlogRouteWithChildren
  '/bookmarks': typeof BookmarksRoute
  '/contact': typeof ContactRoute
  '/experience': typeof ExperienceRoute
  '/games': typeof GamesRoute
  '/projects': typeof ProjectsRoute
  '/ranks': typeof RanksRoute
  '/writing': typeof WritingRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof BlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/blog'
    | '/bookmarks'
    | '/contact'
    | '/experience'
    | '/games'
    | '/projects'
    | '/ranks'
    | '/writing'
    | '/blog/$slug'
    | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin'
    | '/bookmarks'
    | '/contact'
    | '/experience'
    | '/games'
    | '/projects'
    | '/ranks'
    | '/writing'
    | '/blog/$slug'
    | '/blog'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/blog'
    | '/bookmarks'
    | '/contact'
    | '/experience'
    | '/games'
    | '/projects'
    | '/ranks'
    | '/writing'
    | '/blog/$slug'
    | '/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRoute
  BlogRoute: typeof BlogRouteWithChildren
  BookmarksRoute: typeof BookmarksRoute
  ContactRoute: typeof ContactRoute
  ExperienceRoute: typeof ExperienceRoute
  GamesRoute: typeof GamesRoute
  ProjectsRoute: typeof ProjectsRoute
  RanksRoute: typeof RanksRoute
  WritingRoute: typeof WritingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/writing': {
      id: '/writing'
      path: '/writing'
      fullPath: '/writing'
      preLoaderRoute: typeof WritingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ranks': {
      id: '/ranks'
      path: '/ranks'
      fullPath: '/ranks'
      preLoaderRoute: typeof RanksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games': {
      id: '/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experience': {
      id: '/experience'
      path: '/experience'
      fullPath: '/experience'
      preLoaderRoute: typeof ExperienceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmarks': {
      id: '/bookmarks'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof BlogRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof BlogRoute
    }
  }
}

interface BlogRouteChildren {
  BlogSlugRoute: typeof BlogSlugRoute
  BlogIndexRoute: typeof BlogIndexRoute
}

const BlogRouteChildren: BlogRouteChildren = {
  BlogSlugRoute: BlogSlugRoute,
  BlogIndexRoute: BlogIndexRoute,
}

const BlogRouteWithChildren = BlogRoute._addFileChildren(BlogRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRoute,
  BlogRoute: BlogRouteWithChildren,
  BookmarksRoute: BookmarksRoute,
  ContactRoute: ContactRoute,
  ExperienceRoute: ExperienceRoute,
  GamesRoute: GamesRoute,
  ProjectsRoute: ProjectsRoute,
  RanksRoute: RanksRoute,
  WritingRoute: WritingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
